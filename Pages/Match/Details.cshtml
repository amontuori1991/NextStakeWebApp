@page "/Match/Details"

@model NextStakeWebApp.Pages.Match.DetailsModel
@{
    ViewData["Title"] = "Dettaglio Match";
}

<div class="container py-4">
    <div class="d-flex align-items-center justify-content-between mb-3">
        <div class="d-flex align-items-center gap-2">
            @if (!string.IsNullOrWhiteSpace(Model.Data.LeagueLogo))
            {
                <img src="@Model.Data.LeagueLogo" alt="logo lega" style="height:22px;width:auto;" />
            }
            <h5 class="mb-0">@Model.Data.LeagueName</h5>
            @if (!string.IsNullOrWhiteSpace(Model.Data.CountryName))
            {
                <span class="badge bg-light text-dark">@Model.Data.CountryName</span>
            }
        </div>

        <div class="text-muted">
            @Model.Data.KickoffUtc.ToLocalTime().ToString("dd/MM/yyyy HH:mm")
        </div>
    </div>

    <!-- Match Widget (API-SPORTS) -->
    <!-- Match Widget (API-SPORTS) -->
    <div class="card mb-3">
        <div class="card-body">
            @* TODO: spostare la key in appsettings e leggerla dal Model (già predisposto) *@
            <api-sports-widget data-type="config"
                               data-key="9146b11baf44d94af6e14d347213d63a"
                               data-sport="football"
                               data-lang="it"
                               data-theme="white"
                               data-show-logos="true">
            </api-sports-widget>

            <api-sports-widget data-type="game"
                               data-game-id="@Model.Data.MatchId"
                               data-show-logos="true">
            </api-sports-widget>

            <noscript class="text-muted">
                Abilita JavaScript per visualizzare il widget della partita.
            </noscript>
        </div>
    </div>


    <!-- Azioni -->
    <div class="mb-3 d-flex gap-2">
        <form method="post" action="/Match/Details?handler=ToggleFavorite&id=@Model.Data.MatchId">
            @Html.AntiForgeryToken()
            <button type="submit" class="btn @(Model.Data.IsFavorite ? "btn-warning" : "btn-outline-secondary")">⭐ Preferito</button>
        </form>
        <a class="btn btn-outline-secondary" href="/Events">← Torna agli eventi</a>
    </div>

    <!-- Selettore gruppi -->
    <div class="d-flex justify-content-center">
        <div class="btn-group mb-2" role="group" aria-label="Selettore gruppi tab">
            <button id="btnGroupPron" type="button" class="btn btn-primary">Pronostici</button>
            <button id="btnGroupAnal" type="button" class="btn btn-outline-primary">Analisi</button>
        </div>
    </div>
    <div class="text-center text-danger fw-bold mb-3">
        GIORNATE MANCANTI: @Model.Data.RemainingMatches
    </div>


    <!-- Tabs contenuti -->
    <ul class="nav nav-tabs" id="matchTabs" role="tablist">
        <!-- Gruppo: PRONOSTICI -->
        <li class="nav-item group-pron">
            <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#tab-picks" type="button" role="tab">
                Pronostici consigliati
            </button>
        </li>
        <li class="nav-item group-pron">
            <button class="nav-link" data-bs-toggle="tab" data-bs-target="#tab-h2h" type="button" role="tab">
                Stato di forma (ultime 5)
            </button>
        </li>
        <li class="nav-item group-pron">
            <button class="nav-link" data-bs-toggle="tab" data-bs-target="#tab-table" type="button" role="tab">
                Classifica
            </button>
        </li>
        <li class="nav-item group-pron">
            <button class="nav-link" id="tab-exchange-tab" data-bs-toggle="tab" data-bs-target="#tab-exchange" type="button" role="tab">
                Exchange
            </button>
        </li>
        <li class="nav-item group-pron">
            <button class="nav-link" data-bs-toggle="tab" data-bs-target="#tab-h2h-all" type="button" role="tab">
                H2H
            </button>
        </li>

        <!-- Gruppo: ANALISI -->
        <li class="nav-item group-anal">
            <button class="nav-link" data-bs-toggle="tab" data-bs-target="#tab-shots" type="button" role="tab">
                Tiri
            </button>
        </li>
        <li class="nav-item group-anal">
            <button class="nav-link" data-bs-toggle="tab" data-bs-target="#tab-fouls" type="button" role="tab">
                Falli
            </button>
        </li>
        <li class="nav-item group-anal">
            <button class="nav-link" data-bs-toggle="tab" data-bs-target="#tab-cards" type="button" role="tab">
                Cartellini
            </button>
        </li>
        <li class="nav-item group-anal">
            <button class="nav-link" data-bs-toggle="tab" data-bs-target="#tab-offsides" type="button" role="tab">
                Fuorigioco
            </button>
        </li>
        <li class="nav-item group-anal">
            <button class="nav-link" data-bs-toggle="tab" data-bs-target="#tab-goals" type="button" role="tab">
                Goal Attesi
            </button>
        </li>
        <li class="nav-item group-anal">
            <button class="nav-link" data-bs-toggle="tab" data-bs-target="#tab-corners" type="button" role="tab">
                Corner
            </button>
        </li>
    </ul>

    <div class="tab-content border-start border-end border-bottom p-3">
        <!-- PRONOSTICI: Pronostici consigliati -->
        <div class="tab-pane fade show active" id="tab-picks" role="tabpanel">
            @if (Model.Data.Prediction is null)
            {
                <div class="text-muted">Nessun pronostico disponibile.</div>
            }
            else
            {
                var p = Model.Data.Prediction;
                <div class="row g-3">
                    <div class="col-md-6">
                        <ul class="list-group">
                            <li class="list-group-item d-flex justify-content-between"><span><strong>Esito</strong></span><span>@p.Esito</span></li>
                            <li class="list-group-item d-flex justify-content-between"><span><strong>GG/NG</strong></span><span>@p.GG_NG</span></li>
                            <li class="list-group-item d-flex justify-content-between"><span><strong>Over/Under</strong></span><span>@p.OverUnderRange</span></li>
                            <li class="list-group-item d-flex justify-content-between"><span><strong>Combo</strong></span><span>@p.ComboFinale</span></li>
                        </ul>
                    </div>
                    <div class="col-md-6">
                        <ul class="list-group">
                            <li class="list-group-item d-flex justify-content-between">
                                <span><strong>Goal simulati</strong></span>
                                <span>@p.GoalSimulatoCasa - @p.GoalSimulatoOspite (Tot: @p.TotaleGoalSimulati)</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between"><span><strong>% Over 1.5</strong></span><span>@p.Over1_5%</span></li>
                            <li class="list-group-item d-flex justify-content-between"><span><strong>% Over 2.5</strong></span><span>@p.Over2_5%</span></li>
                            <li class="list-group-item d-flex justify-content-between"><span><strong>% Over 3.5</strong></span><span>@p.Over3_5%</span></li>
                            <li class="list-group-item d-flex justify-content-between"><span><strong>Multigoal Casa</strong></span><span>@p.MultigoalCasa</span></li>
                            <li class="list-group-item d-flex justify-content-between"><span><strong>Multigoal Ospite</strong></span><span>@p.MultigoalOspite</span></li>
                        </ul>
                    </div>
                </div>
            }
        </div>

        <!-- PRONOSTICI: H2H (tutti) -->
        <!-- TAB: H2H (Widget API-SPORTS) -->
        <div class="tab-pane fade" id="tab-h2h-all" role="tabpanel">
            <div class="card card-body text-center">
                <api-sports-widget data-type="config"
                                   data-key="9146b11baf44d94af6e14d347213d63a"
                                   data-sport="football"
                                   data-lang="it"
                                   data-theme="grey"
                                   data-show-logos="true">
                </api-sports-widget>

                <api-sports-widget data-type="h2h"
                                   data-h2h="@Model.Data.HomeId-@Model.Data.AwayId"
                                   data-show-logos="true">
                </api-sports-widget>

                <noscript class="text-muted">
                    Abilita JavaScript per visualizzare il widget H2H.
                </noscript>
            </div>
        </div>


        <!-- ANALISI: Goal Attesi (SEZIONI Casa/Ospite) -->
        <div class="tab-pane fade" id="tab-goals" role="tabpanel">
            @if (Model.Data.Goals is null || Model.Data.Goals.Metrics.Count == 0)
            {
                <div class="text-muted">Nessuna analisi goal disponibile.</div>
            }
            else
            {
                var metrics = Model.Data.Goals.Metrics;

                var groups = metrics
                .Select(kv =>
                {
                    var key = kv.Key?.Trim() ?? "";
                    var lastDash = key.LastIndexOf('-');
                    var baseName = lastDash > 0 ? key.Substring(0, lastDash).Trim() : key;
                    var side = lastDash > 0 ? key[(lastDash + 1)..].Trim() : "";
                    return new { baseName, side, value = kv.Value };
                })
                .GroupBy(x => x.baseName, StringComparer.OrdinalIgnoreCase)
                .ToDictionary(
                g => g.Key,
                g => new
                {
                    Casa = g.FirstOrDefault(i => string.Equals(i.side, "Casa", StringComparison.OrdinalIgnoreCase))?.value ?? "—",
                    Ospite = g.FirstOrDefault(i => string.Equals(i.side, "Ospite", StringComparison.OrdinalIgnoreCase))?.value ?? "—"
                },
                StringComparer.OrdinalIgnoreCase
                );

                var orderedKeys = groups.Keys.OrderBy(k => k);

                <div class="vstack gap-3">
                    @foreach (var key in orderedKeys)
                    {
                        var row = groups[key];
                        <div class="mb-2">
                            <div class="fw-semibold border-bottom pb-1">@key</div>
                            <div class="row g-2 pt-2">
                                <div class="col-6">
                                    <div class="p-2 bg-light rounded d-flex justify-content-between">
                                        <span>Casa</span><span class="fw-bold">@row.Casa</span>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="p-2 bg-light rounded d-flex justify-content-between">
                                        <span>Ospite</span><span class="fw-bold">@row.Ospite</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>


        <!-- PRONOSTICI: Stato di forma -->
        <div class="tab-pane fade" id="tab-h2h" role="tabpanel">
            <div class="row g-3">
                <div class="col-md-6">
                    <h6 class="mb-2">Forma @Model.Data.Home</h6>
                    @if (Model.Data.HomeForm.Count == 0)
                    {
                        <div class="text-muted">Nessun dato.</div>
                    }
                    else
                    {
                        <div class="list-group">
                            @foreach (var m in Model.Data.HomeForm)
                            {
                                <a asp-page="/Match/Details" asp-route-id="@m.MatchId" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                                    <div>
                                        <small class="text-muted">@m.DateUtc.ToLocalTime().ToString("dd/MM")</small>
                                        <span class="ms-2">@m.Opponent</span>
                                        <span class="badge bg-light text-dark ms-2">@(m.IsHome ? "Casa" : "Trasferta")</span>
                                    </div>
                                    <div class="d-flex align-items-center gap-2">
                                        <span>@m.Score</span>
                                        @if (m.Result == "W") { <span class="badge bg-success">W</span>; }
                                        else if (m.Result == "D") { <span class="badge bg-secondary">D</span>; }
                                        else { <span class="badge bg-danger">L</span>; }
                                    </div>
                                </a>
                            }
                        </div>
                    }
                </div>

                <div class="col-md-6">
                    <h6 class="mb-2">Forma @Model.Data.Away</h6>
                    @if (Model.Data.AwayForm.Count == 0)
                    {
                        <div class="text-muted">Nessun dato.</div>
                    }
                    else
                    {
                        <div class="list-group">
                            @foreach (var m in Model.Data.AwayForm)
                            {
                                <a asp-page="/Match/Details" asp-route-id="@m.MatchId" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                                    <div>
                                        <small class="text-muted">@m.DateUtc.ToLocalTime().ToString("dd/MM")</small>
                                        <span class="ms-2">@m.Opponent</span>
                                        <span class="badge bg-light text-dark ms-2">@(m.IsHome ? "Casa" : "Trasferta")</span>
                                    </div>
                                    <div class="d-flex align-items-center gap-2">
                                        <span>@m.Score</span>
                                        @if (m.Result == "W") { <span class="badge bg-success">W</span>; }
                                        else if (m.Result == "D") { <span class="badge bg-secondary">D</span>; }
                                        else { <span class="badge bg-danger">L</span>; }
                                    </div>
                                </a>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- PRONOSTICI: Classifica -->
        <div class="tab-pane fade" id="tab-table" role="tabpanel">
            @if (Model.Data.Standings.Count == 0)
            {
                <div class="text-muted">Classifica non disponibile per questa lega/stagione.</div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-sm table-striped align-middle">
                        <thead>
                            <tr>
                                <th>#</th><th>Squadra</th>
                                <th class="text-center">Punti</th>
                                <th class="text-center">G</th>
                                <th class="text-center">V</th>
                                <th class="text-center">N</th>
                                <th class="text-center">P</th>
                                <th class="text-center">GF</th>
                                <th class="text-center">GA</th>
                                <th class="text-center">Diff</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var s in Model.Data.Standings)
                            {
                                var isHome = s.TeamId == Model.Data.HomeId;
                                var isAway = s.TeamId == Model.Data.AwayId;
                                var rowClass = isHome ? "table-success" : (isAway ? "table-danger" : "");
                                <tr class="@rowClass">
                                    <td>@s.Rank</td>
                                    <td>@s.TeamName</td>
                                    <td class="text-center fw-bold">@s.Points</td>
                                    <td class="text-center">@s.Played</td>
                                    <td class="text-center">@s.Win</td>
                                    <td class="text-center">@s.Draw</td>
                                    <td class="text-center">@s.Lose</td>
                                    <td class="text-center">@s.GF</td>
                                    <td class="text-center">@s.GA</td>
                                    <td class="text-center">@s.Diff</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>

        <!-- ANALISI: Corner (SEZIONI Casa/Ospite) -->
        <div class="tab-pane fade" id="tab-corners" role="tabpanel">
            @if (Model.Data.Corners is null || Model.Data.Corners.Metrics.Count == 0)
            {
                <div class="text-muted">Nessuna analisi corner disponibile.</div>
            }
            else
            {
                var metrics = Model.Data.Corners.Metrics;

                var groups = metrics
                .Select(kv =>
                {
                    var key = kv.Key?.Trim() ?? "";
                    var lastDash = key.LastIndexOf('-');
                    var baseName = lastDash > 0 ? key.Substring(0, lastDash).Trim() : key;
                    var side = lastDash > 0 ? key[(lastDash + 1)..].Trim() : "";
                    return new { baseName, side, value = kv.Value };
                })
                .GroupBy(x => x.baseName, StringComparer.OrdinalIgnoreCase)
                .ToDictionary(
                g => g.Key,
                g => new
                {
                    Casa = g.FirstOrDefault(i => string.Equals(i.side, "Casa", StringComparison.OrdinalIgnoreCase))?.value ?? "—",
                    Ospite = g.FirstOrDefault(i => string.Equals(i.side, "Ospite", StringComparison.OrdinalIgnoreCase))?.value ?? "—"
                },
                StringComparer.OrdinalIgnoreCase
                );

                var orderedKeys = groups.Keys.OrderBy(k => k);

                <div class="vstack gap-3">
                    @foreach (var key in orderedKeys)
                    {
                        var row = groups[key];
                        <div class="mb-2">
                            <div class="fw-semibold border-bottom pb-1">@key</div>
                            <div class="row g-2 pt-2">
                                <div class="col-6"><div class="p-2 bg-light rounded d-flex justify-content-between"><span>Casa</span><span class="fw-bold">@row.Casa</span></div></div>
                                <div class="col-6"><div class="p-2 bg-light rounded d-flex justify-content-between"><span>Ospite</span><span class="fw-bold">@row.Ospite</span></div></div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>


        <!-- ANALISI: Cartellini (SEZIONI Casa/Ospite) -->
        <div class="tab-pane fade" id="tab-cards" role="tabpanel">
            @if (Model.Data.Cards is null || Model.Data.Cards.Metrics.Count == 0)
            {
                <div class="text-muted">Nessuna analisi cartellini disponibile.</div>
            }
            else
            {
                var metrics = Model.Data.Cards.Metrics;

                var groups = metrics
                .Select(kv =>
                {
                    var key = kv.Key?.Trim() ?? "";
                    var lastDash = key.LastIndexOf('-');
                    var baseName = lastDash > 0 ? key.Substring(0, lastDash).Trim() : key;
                    var side = lastDash > 0 ? key[(lastDash + 1)..].Trim() : "";
                    return new { baseName, side, value = kv.Value };
                })
                .GroupBy(x => x.baseName, StringComparer.OrdinalIgnoreCase)
                .ToDictionary(
                g => g.Key,
                g => new
                {
                    Casa = g.FirstOrDefault(i => string.Equals(i.side, "Casa", StringComparison.OrdinalIgnoreCase))?.value ?? "—",
                    Ospite = g.FirstOrDefault(i => string.Equals(i.side, "Ospite", StringComparison.OrdinalIgnoreCase))?.value ?? "—"
                },
                StringComparer.OrdinalIgnoreCase
                );

                var orderedKeys = groups.Keys.OrderBy(k => k);

                <div class="vstack gap-3">
                    @foreach (var key in orderedKeys)
                    {
                        var row = groups[key];
                        <div class="mb-2">
                            <div class="fw-semibold border-bottom pb-1">@key</div>
                            <div class="row g-2 pt-2">
                                <div class="col-6"><div class="p-2 bg-light rounded d-flex justify-content-between"><span>Casa</span><span class="fw-bold">@row.Casa</span></div></div>
                                <div class="col-6"><div class="p-2 bg-light rounded d-flex justify-content-between"><span>Ospite</span><span class="fw-bold">@row.Ospite</span></div></div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>


        <!-- ANALISI: Falli (SEZIONI Casa/Ospite) -->
        <div class="tab-pane fade" id="tab-fouls" role="tabpanel">
            @if (Model.Data.Fouls is null || Model.Data.Fouls.Metrics.Count == 0)
            {
                <div class="text-muted">Nessuna analisi falli disponibile.</div>
            }
            else
            {
                var metrics = Model.Data.Fouls.Metrics;

                var groups = metrics
                .Select(kv =>
                {
                    var key = kv.Key?.Trim() ?? "";
                    var lastDash = key.LastIndexOf('-');
                    var baseName = lastDash > 0 ? key.Substring(0, lastDash).Trim() : key;
                    var side = lastDash > 0 ? key[(lastDash + 1)..].Trim() : "";
                    return new { baseName, side, value = kv.Value };
                })
                .GroupBy(x => x.baseName, StringComparer.OrdinalIgnoreCase)
                .ToDictionary(
                g => g.Key,
                g => new
                {
                    Casa = g.FirstOrDefault(i => string.Equals(i.side, "Casa", StringComparison.OrdinalIgnoreCase))?.value ?? "—",
                    Ospite = g.FirstOrDefault(i => string.Equals(i.side, "Ospite", StringComparison.OrdinalIgnoreCase))?.value ?? "—"
                },
                StringComparer.OrdinalIgnoreCase
                );

                var orderedKeys = groups.Keys.OrderBy(k => k);

                <div class="vstack gap-3">
                    @foreach (var key in orderedKeys)
                    {
                        var row = groups[key];
                        <div class="mb-2">
                            <div class="fw-semibold border-bottom pb-1">@key</div>
                            <div class="row g-2 pt-2">
                                <div class="col-6"><div class="p-2 bg-light rounded d-flex justify-content-between"><span>Casa</span><span class="fw-bold">@row.Casa</span></div></div>
                                <div class="col-6"><div class="p-2 bg-light rounded d-flex justify-content-between"><span>Ospite</span><span class="fw-bold">@row.Ospite</span></div></div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>


        <!-- ANALISI: Fuorigioco (SEZIONI Casa/Ospite) -->
        <div class="tab-pane fade" id="tab-offsides" role="tabpanel">
            @if (Model.Data.Offsides is null || Model.Data.Offsides.Metrics.Count == 0)
            {
                <div class="text-muted">Nessuna analisi fuorigioco disponibile.</div>
            }
            else
            {
                var metrics = Model.Data.Offsides.Metrics;

                var groups = metrics
                .Select(kv =>
                {
                    var key = kv.Key?.Trim() ?? "";
                    var lastDash = key.LastIndexOf('-');
                    var baseName = lastDash > 0 ? key.Substring(0, lastDash).Trim() : key;
                    var side = lastDash > 0 ? key[(lastDash + 1)..].Trim() : "";
                    return new { baseName, side, value = kv.Value };
                })
                .GroupBy(x => x.baseName, StringComparer.OrdinalIgnoreCase)
                .ToDictionary(
                g => g.Key,
                g => new
                {
                    Casa = g.FirstOrDefault(i => string.Equals(i.side, "Casa", StringComparison.OrdinalIgnoreCase))?.value ?? "—",
                    Ospite = g.FirstOrDefault(i => string.Equals(i.side, "Ospite", StringComparison.OrdinalIgnoreCase))?.value ?? "—"
                },
                StringComparer.OrdinalIgnoreCase
                );

                var orderedKeys = groups.Keys.OrderBy(k => k);

                <div class="vstack gap-3">
                    @foreach (var key in orderedKeys)
                    {
                        var row = groups[key];
                        <div class="mb-2">
                            <div class="fw-semibold border-bottom pb-1">@key</div>
                            <div class="row g-2 pt-2">
                                <div class="col-6"><div class="p-2 bg-light rounded d-flex justify-content-between"><span>Casa</span><span class="fw-bold">@row.Casa</span></div></div>
                                <div class="col-6"><div class="p-2 bg-light rounded d-flex justify-content-between"><span>Ospite</span><span class="fw-bold">@row.Ospite</span></div></div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>


        <!-- ANALISI: Tiri (SEZIONI Casa/Ospite) -->
        <div class="tab-pane fade" id="tab-shots" role="tabpanel">
            @if (Model.Data.Shots is null || Model.Data.Shots.Metrics.Count == 0)
            {
                <div class="text-muted">Nessuna analisi tiri disponibile.</div>
            }
            else
            {
                var metrics = Model.Data.Shots.Metrics;

                var groups = metrics
                .Select(kv =>
                {
                    var key = kv.Key?.Trim() ?? "";
                    var lastDash = key.LastIndexOf('-');
                    var baseName = lastDash > 0 ? key.Substring(0, lastDash).Trim() : key;
                    var side = lastDash > 0 ? key[(lastDash + 1)..].Trim() : "";
                    return new { baseName, side, value = kv.Value };
                })
                .GroupBy(x => x.baseName, StringComparer.OrdinalIgnoreCase)
                .ToDictionary(
                g => g.Key,
                g => new
                {
                    Casa = g.FirstOrDefault(i => string.Equals(i.side, "Casa", StringComparison.OrdinalIgnoreCase))?.value ?? "—",
                    Ospite = g.FirstOrDefault(i => string.Equals(i.side, "Ospite", StringComparison.OrdinalIgnoreCase))?.value ?? "—"
                },
                StringComparer.OrdinalIgnoreCase
                );

                string[] desiredOrder = new[] {
                        "Effettuati", "Subiti", "In Casa", "Fuoricasa",
                        "Ultime 5", "Partite Vinte", "Partite Pareggiate", "Partite Perse"
                        };

                var orderedKeys = groups.Keys
                .OrderBy(k => { var idx = Array.IndexOf(desiredOrder, k); return idx < 0 ? int.MaxValue : idx; })
                .ThenBy(k => k);

                <div class="vstack gap-3">
                    @foreach (var key in orderedKeys)
                    {
                        var row = groups[key];
                        <div class="mb-2">
                            <div class="fw-semibold border-bottom pb-1">@key</div>
                            <div class="row g-2 pt-2">
                                <div class="col-6">
                                    <div class="p-2 bg-light rounded d-flex justify-content-between">
                                        <span>Casa</span><span class="fw-bold">@row.Casa</span>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="p-2 bg-light rounded d-flex justify-content-between">
                                        <span>Ospite</span><span class="fw-bold">@row.Ospite</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>


        <!-- PRONOSTICI: Exchange -->
        <div class="tab-pane fade" id="tab-exchange" role="tabpanel">
            @if (Model.Data.Exchange is null)
            {
                <div class="text-muted">Nessun dato Exchange disponibile.</div>
            }
            else
            {
                var e = Model.Data.Exchange;
                <ul class="list-group">
                    <li class="list-group-item d-flex justify-content-between"><span><strong>Bancata consigliata</strong></span><span>@e.BancataConsigliata</span></li>
                    <li class="list-group-item d-flex justify-content-between"><span>Banca 1 – Affidabilità</span><span>@e.Banca1Affidabilita%</span></li>
                    <li class="list-group-item d-flex justify-content-between"><span>Banca X – Affidabilità</span><span>@e.BancaXAffidabilita%</span></li>
                    <li class="list-group-item d-flex justify-content-between"><span>Banca 2 – Affidabilità</span><span>@e.Banca2Affidabilita%</span></li>
                    <li class="list-group-item"><strong>Top lay risultati esatti:</strong> @e.BancaRisultato1, @e.BancaRisultato2, @e.BancaRisultato3</li>
                </ul>
            }
        </div>
    </div>

    <!-- Script per gruppi -->
    <script>
        (function () {
            const btnPron = document.getElementById('btnGroupPron');
            const btnAnal = document.getElementById('btnGroupAnal');
            const tabsUl  = document.getElementById('matchTabs');

            function showGroup(group) {
                tabsUl.querySelectorAll('.group-pron').forEach(li => li.classList.toggle('d-none', group !== 'pron'));
                tabsUl.querySelectorAll('.group-anal').forEach(li => li.classList.toggle('d-none', group !== 'anal'));

                if (group === 'pron') {
                    btnPron.classList.add('btn-primary'); btnPron.classList.remove('btn-outline-primary');
                    btnAnal.classList.add('btn-outline-primary'); btnAnal.classList.remove('btn-primary');
                } else {
                    btnAnal.classList.add('btn-primary'); btnAnal.classList.remove('btn-outline-primary');
                    btnPron.classList.add('btn-outline-primary'); btnPron.classList.remove('btn-primary');
                }

                const activeBtn = tabsUl.querySelector('.nav-link.active');
                const activeLi  = activeBtn ? activeBtn.closest('li') : null;
                const activeIsInGroup = activeLi && !activeLi.classList.contains('d-none');

                if (!activeIsInGroup) {
                    const firstVisible = tabsUl.querySelector(group === 'pron' ? '.group-pron .nav-link' : '.group-anal .nav-link');
                    if (firstVisible) firstVisible.click();
                }
            }

            btnPron?.addEventListener('click', () => showGroup('pron'));
            btnAnal?.addEventListener('click', () => showGroup('anal'));

            document.addEventListener('DOMContentLoaded', () => showGroup('pron'));
        })();
    </script>

    @section Scripts {
        <script type="module" src="https://widgets.api-sports.io/3.1.0/widgets.js"></script>
    }

</div>
